// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joshjennings98/backend-demo/v2/server/server (interfaces: ICommandManager)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_server.go -package=mocks github.com/joshjennings98/backend-demo/v2/server/server ICommandManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockICommandManager is a mock of ICommandManager interface.
type MockICommandManager struct {
	ctrl     *gomock.Controller
	recorder *MockICommandManagerMockRecorder
}

// MockICommandManagerMockRecorder is the mock recorder for MockICommandManager.
type MockICommandManagerMockRecorder struct {
	mock *MockICommandManager
}

// NewMockICommandManager creates a new mock instance.
func NewMockICommandManager(ctrl *gomock.Controller) *MockICommandManager {
	mock := &MockICommandManager{ctrl: ctrl}
	mock.recorder = &MockICommandManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandManager) EXPECT() *MockICommandManagerMockRecorder {
	return m.recorder
}

// ExecuteCommand mocks base method.
func (m *MockICommandManager) ExecuteCommand(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockICommandManagerMockRecorder) ExecuteCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockICommandManager)(nil).ExecuteCommand), arg0, arg1)
}

// GetWebsocketConnection mocks base method.
func (m *MockICommandManager) GetWebsocketConnection() *websocket.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsocketConnection")
	ret0, _ := ret[0].(*websocket.Conn)
	return ret0
}

// GetWebsocketConnection indicates an expected call of GetWebsocketConnection.
func (mr *MockICommandManagerMockRecorder) GetWebsocketConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsocketConnection", reflect.TypeOf((*MockICommandManager)(nil).GetWebsocketConnection))
}

// IsRunning mocks base method.
func (m *MockICommandManager) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockICommandManagerMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockICommandManager)(nil).IsRunning))
}

// SetCancelCommand mocks base method.
func (m *MockICommandManager) SetCancelCommand(arg0 context.CancelFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCancelCommand", arg0)
}

// SetCancelCommand indicates an expected call of SetCancelCommand.
func (mr *MockICommandManagerMockRecorder) SetCancelCommand(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCancelCommand", reflect.TypeOf((*MockICommandManager)(nil).SetCancelCommand), arg0)
}

// SetRunning mocks base method.
func (m *MockICommandManager) SetRunning(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRunning", arg0)
}

// SetRunning indicates an expected call of SetRunning.
func (mr *MockICommandManagerMockRecorder) SetRunning(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunning", reflect.TypeOf((*MockICommandManager)(nil).SetRunning), arg0)
}

// SetWebsocketConnection mocks base method.
func (m *MockICommandManager) SetWebsocketConnection(arg0 *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWebsocketConnection", arg0)
}

// SetWebsocketConnection indicates an expected call of SetWebsocketConnection.
func (mr *MockICommandManagerMockRecorder) SetWebsocketConnection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebsocketConnection", reflect.TypeOf((*MockICommandManager)(nil).SetWebsocketConnection), arg0)
}

// StartCommand mocks base method.
func (m *MockICommandManager) StartCommand(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCommand", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCommand indicates an expected call of StartCommand.
func (mr *MockICommandManagerMockRecorder) StartCommand(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCommand", reflect.TypeOf((*MockICommandManager)(nil).StartCommand), arg0)
}

// StopCurrentCommand mocks base method.
func (m *MockICommandManager) StopCurrentCommand() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCurrentCommand")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCurrentCommand indicates an expected call of StopCurrentCommand.
func (mr *MockICommandManagerMockRecorder) StopCurrentCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCurrentCommand", reflect.TypeOf((*MockICommandManager)(nil).StopCurrentCommand))
}

// TermClear mocks base method.
func (m *MockICommandManager) TermClear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermClear")
	ret0, _ := ret[0].(error)
	return ret0
}

// TermClear indicates an expected call of TermClear.
func (mr *MockICommandManagerMockRecorder) TermClear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermClear", reflect.TypeOf((*MockICommandManager)(nil).TermClear))
}

// TermMessage mocks base method.
func (m *MockICommandManager) TermMessage(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TermMessage indicates an expected call of TermMessage.
func (mr *MockICommandManagerMockRecorder) TermMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermMessage", reflect.TypeOf((*MockICommandManager)(nil).TermMessage), arg0)
}
